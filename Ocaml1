(* TODO: fact function.*)
(* TODO: tests for the fact function. *)
let fact_tests = [
  (0, 1.);
  (1, 1.);
  (2, 2.);
  (5, 120.);
  (10, 3628800.);
]

let rec fact (n: int): float =
  match n with
  | 0 -> 1.
  | _ -> float_of_int(n) *. fact(n-1);;


(* TODO: binomial function.*)
let binomial_tests = [
  (* Your test cases go here. Correct the incorrect test cases for the function. *)
  ((0, 0), 1.);
  ((1, 0), 1.);
  ((2, 0), 1.);
  ((10, 1), 10.);
  ((10, 2), 45.);
  ((10, 10), 1.); 
  ((7, 4), 35.);
]

let binomial (n: int) (k: int) =
  if n < 0
  then domain () 
  else if n < k
  then domain ()
  else (if k = n
        then 1.
        else fact n /. (fact k) /. fact (n - k))

       
(* TODO: tests for distance. *)
let distance_tests = [ 
  (((3,4),(3,4)),0.);
  (((3,4),(7,7)),5.);
  (((3,4),(3,5)),1.);
  (((0,0),(1,1)),sqrt(2.));
  (((7,7),(3,4)),5.);
  (((10,12),(5,0)),13.);
  (((10,11),(7,8)),sqrt(18.));
  (((0,0),(-1,-1)),sqrt(2.));
  (((-2,-1),(1,2)),sqrt(18.));
  (((1,2),(-2,-1)),sqrt(18.)); 
  (((-1,-1),(-1,-2)),1.); 
]
;;

let max (a:int) (b:int) = 
  if a >= b
  then a
  else b;; 

let min (a:int) (b:int) = 
  if a <= b
  then a
  else b;;
  
let distance ((x1, y1): (int * int)) ((x2, y2): (int * int)) : float = 
  let dx = float_of_int(max x1 x2 - min x1 x2)  in
  let dy = float_of_int(max y1 y2 - min y1 y2)  in
  sqrt (dx *. dx +. dy *. dy)
;;


(* TODO: is_prime *)

(* TODO: tests for is_prime. *)
let is_prime_tests = [
  (5,true);
  (17,true);
  (4,false);
  (99,false);
  (127,true);
  (117,false);
  (2, true); 
  (3, true);
  (6, false);
]

let is_prime n =
  if n <= 1
  then domain()
  else (
    let div = (n - 1) in
    let rec remainderCheck div n =
      match div with
        1 -> true
      | _ -> match n mod div with
          0 -> false
        | _ -> remainderCheck (div - 1) n
    in
    remainderCheck div n)
;; 

(* TODO: Riemann Zeta function *)

let pi = 2.0 *. asin 1.0;;

let zeta_tests = [
  (2.,1.644934);
  (3.,1.202056);
  (4.,1.08232);
  (5.,1.036927);
  (6.5, 1.01200589); 
] 
;;

let currentterm (n:float) (k:float) : float = 
  1. /. (n ** k);; 


let zeta (k: float) : float = 
  let rec approx_zeta (k:float) (acc:float) (n:float) (sum_so_far:float) = 
    let nextvar = 1. /. ((n+.1.) ** k) in
    let currentvar = 1. /. (n ** k) in 
    if  nextvar < acc
    then sum_so_far 
    else 
      let (sum_so_far:float) =sum_so_far +. currentvar in
      let n = n+.1. in
      approx_zeta k acc n sum_so_far
        (*  approx_zeta k acc n (sum_so_far +. currentvar) *)
  in 
      (*  Note that we put < 2. while the function still works 
          to evaluate any smaller arguments *)
  if k < 2. 
  then domain () 
  else approx_zeta k epsilon_float 1. 0.
;; 

let y = zeta 6.5;;
y;;

(* TODO: Fibonacci*) 

(* TODO: tests for fib_tl. *)
let fib_tl_tests = [
  (0,1);
  (1,1);
  (2,2);
  (3,3);
  (4,5);
  (5,8);
]

let rec fib_aux n a b = 
  if n = 0 then a 
  else fib_aux (n-1) (b) (a+b) ;; 

let fib_tl n = 
  fib_aux n 1 1;;
  
(*
  let rec fib_aux n a b = 
    if n = 0 then a 
    else fib_aux (n-1) (b) (a+b) 
  in fib_aux n 1 1;;*)

(*back up solution*)
